from aiogram.types import ErrorEvent, Message, CallbackQuery

from init import error_router
from settings import log_error, conf
import utils as ut
import db

from enums import HandlerKey


if not conf.debug:
    @error_router.errors()
    async def error_handler(ex: ErrorEvent, session_id: str):
        tb, msg = log_error (ex)
        user_id = ex.update.message.from_user.id if ex.update.message else None

        await db.LogsError.add(user_id=user_id, traceback=tb, message=msg)

        if user_id:
            await db.LogsUser.add(
                user_id=user_id,
                action=HandlerKey.ERROR.key,
                session=session_id
            )


@error_router.message()
async def free_msg_hnd(msg: Message, user: db.User, session_id: str):
    print(f'free_msg_hnd:\n{msg.content_type}\n{msg.text}')
    text = await db.Text.get_text(HandlerKey.EMPTY_REQUEST.key)

    await msg.answer(text)
    await ut.send_gpt_start(user=user)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.LogsUser.add(
        user_id=msg.from_user.id,
        action=HandlerKey.EMPTY_REQUEST.key,
        session=session_id
    )


# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É, –≤ —Å–ª—É—á–∞–µ —É–¥–∞—á–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç
@error_router.callback_query()
async def free_cb_hnd(cb: CallbackQuery):
    print(f'free_cb_hnd:\n{cb.data}')

    await cb.answer('üõ† –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', show_alert=True)
