from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

import db
from init import bot
import keyboards as kb
from settings import conf, log_error
from utils.gpt_ut import ask_gpt
from enums import MenuCommand


# —Å—Ç–∞—Ä—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –≥–ø—Ç
async def send_main_menu(user: db.User = None, user_id: int = None, msg_id: int = None):
    text = ('ü§ñ –ü—Ä–∏–≤–µ—Ç!\n'
            '–Ø ‚Äî SalesMind AI, —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º.\n'
            '–°–∫—Ä–∏–ø—Ç—ã, –ø–∏—Å—å–º–∞, KPI, –Ω–∞–π–º ‚Äî –≤—Å—ë –∑–∞ —Å–µ–∫—É–Ω–¥—ã.\n\n'
            'üéØ –•–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–µ–π—Å–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏ –Ω–æ–≤–æ—Å—Ç–µ–π?\n'
            '–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üëâ @SalesMindAI\n\n'
            '–í—ã–±–∏—Ä–∞–π, —á—Ç–æ –Ω—É–∂–Ω–æ üëá'
            )
    markup = kb.get_main_menu_kb()
    if msg_id:
        await bot.edit_message_text(chat_id=user_id, message_id=msg_id, text=text, reply_markup=markup)
    else:
        await bot.send_message(chat_id=user_id, text=text, reply_markup=markup)


# —Å—Ç–∞—Ä—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –≥–ø—Ç
async def send_gpt_start(user_id: int, msg_id: int = None):
    categories = await db.PromptCategory.get_all()
    text = '‚úÖ –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π'
    markup = kb.get_prompt_categories_kb(categories)
    if msg_id:
        await bot.edit_message_text(chat_id=user_id, message_id=msg_id, text=text, reply_markup=markup)
    else:
        await bot.send_message(chat_id=user_id, text=text, reply_markup=markup)


# —Å—Ç–∞—Ä—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –≥–ø—Ç
async def send_gpt_answer(
        user_id: int,
        user_prompt: str,
        prompt_id: int,
):

    try:
        sent = await bot.send_message(chat_id=user_id, text='–î—É–º–∞—é...')

        prompt = await db.Prompt.get_by_id(prompt_id)
        history = await db.Message.get_user_history(user_id=user_id, prompt_id=prompt.id)

        gpt_answer, usage = await ask_gpt(prompt=prompt, history=history, user_prompt=user_prompt)

        message_id = await db.Message.add(
            user_id=user_id,
            prompt_id=prompt.id,
            request=user_prompt,
            response=gpt_answer,
            prompt_tokens=usage.get('prompt_tokens', 0),
            completion_tokens=usage.get('completion_tokens', 0),
            time_answer=usage.get('time_answer'),
        )
        text = (
            f'{gpt_answer}\n\n'
            f'üí¨ –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –∏–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ‚Äî –±–æ—Ç –≤—Å—ë –ø–µ—Ä–µ—Å–æ–±–µ—Ä—ë—Ç.'
        )
        markup = kb.get_new_query_kb(message_id)
        try:
            await sent.edit_text(text=text, reply_markup=markup)
        except Exception as e:
            log_error(e)
            await sent.edit_text(text=text, parse_mode=None, reply_markup=markup)

    except Exception as e:
        await bot.send_message(
            chat_id=user_id, text=f'üòÖ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å /{MenuCommand.GPT.command}'
        )
        log_error(e)


async def send_payment_start(user_id: int, msg_id: int = None):
    tariffs = await db.Tariff.get_all()

    text = ''
    for tariff in tariffs:
        text += f'{tariff.description}\n\n'

    text += f'<b>üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞</b>'

    markup = kb.get_payment_kb(tariffs)
    if msg_id:
        await bot.edit_message_text(chat_id=user_id, message_id=msg_id, text=text, reply_markup=markup)
    else:
        await bot.send_message(chat_id=user_id, text=text, reply_markup=markup)


async def send_info_start(user_id: int, msg_id: int = None):
    text = '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å üëá'
    info = await db.Info.get_all()

    markup = kb.get_info_menu_kb(info)
    if msg_id:
        await bot.edit_message_text(chat_id=user_id, message_id=msg_id, text=text, reply_markup=markup)
    else:
        await bot.send_message(chat_id=user_id, text=text, reply_markup=markup)
