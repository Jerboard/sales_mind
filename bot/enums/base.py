from enum import Enum


# –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
class MenuCommand(Enum):
    START = ('start', 'üîÑ –í –Ω–∞—á–∞–ª–æ')
    GPT = ('gpt', 'üíª –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å')
    PRICE = ('price', 'üí≥ –¢–∞—Ä–∏—Ñ—ã –∏ –¥–æ—Å—Ç—É–ø')
    BALANCE = ('balance', 'üìä –ú–æ–π –±–∞–ª–∞–Ω—Å')
    HELP = ('help', '‚öôÔ∏è –ü–æ–º–æ—â—å')

    def __init__(self, command, label):
        self.command = command
        self.label = label


# –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
class Action(Enum):
    ADD = 'add'
    DEL = 'del'
    CONFIRM = 'confirm'
    BACK = 'back'
    NEW = 'new'
    EDIT = 'edit'


# –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
class PayType(Enum):
    TARIFF = 'tariff'
    REQUEST = 'request'


PAY_TYPE_CHOICES = (
    (PayType.TARIFF.value, '–¢–∞—Ä–∏—Ñ'),
    (PayType.REQUEST.value, '–ó–∞–ø—Ä–æ—Å—ã')
)


# –∫–ª—é—á–∏ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
class HandlerKey(Enum):
    COM_START = ('com_start', '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (–∫–æ–º–∞–Ω–¥–∞)', True)
    BACK_START = ('back_start', '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥)', True)
    ACCEPT = ('accept', '–ü—Ä–∏–Ω—è–ª –ø–æ–ª–∏—Ç–∏–∫—É', True)
    BALANCE_MSG = ('balance_msg', '–ü–æ—Å–º–æ—Ç—Ä–µ–ª –±–∞–ª–∞–Ω—Å (–∫–æ–º–∞–Ω–¥–∞)', False)
    BALANCE_CB = ('balance_cb', '–ü–æ—Å–º–æ—Ç—Ä–µ–ª –±–∞–ª–∞–Ω—Å (–∫–Ω–æ–ø–∫–∞)', False)

    GPT_START_MSG = ('gpt_start_msg', '–ü–µ—Ä–µ—à—ë–ª –≤ –ø—Ä–æ–º–ø—Ç—ã (–∫–æ–º–∞–Ω–¥–∞)', True)
    GPT_START_CB = ('gpt_start_cb', '–ü–µ—Ä–µ—à—ë–ª –≤ –ø—Ä–æ–º–ø—Ç—ã (–∫–Ω–æ–ø–∫–∞)', False)
    GPT_CATEGORY = ('gpt_category', '–í—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é', True)
    GPT_PROMPT = ('gpt_prompt', '–í—ã–±—Ä–∞–ª –ø—Ä–æ–º–ø—Ç', True)

    GPT_PROMPT_PRE_MSG = ('gpt_prompt_pre_msg', '', True)
    GPT_PROMPT_MSG = ('gpt_prompt_msg', '–ó–∞–ø—Ä–æ—Å –∫ –≥–ø—Ç', True)
    GPT_PROMPT_ERROR_MSG = ('gpt_prompt_error_msg', '', True)

    GPT_REPEAT = ('gpt_repeat', '–ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –≥–ø—Ç', False)
    GPT_RATE = ('gpt_rate', '–ü–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É', True)

    PAY_START_MSG = ('pay_start_msg', '–¢–∞—Ä–∏—Ñ—ã (–∫–æ–º–∞–Ω–¥–∞)', True)
    PAY_START_CB = ('pay_start_cb', '–¢–∞—Ä–∏—Ñ—ã (–∫–Ω–æ–ø–∫–∞)', False)
    PAYMENT_URL_EMAIL = ('payment_url_email', '–ó–∞–ø—Ä–æ—Å –ø–æ—á—Ç—ã', True)
    PAYMENT_ADD_EMAIL = ('payment_add_email', '–î–æ–±–∞–≤–∏–ª –ø–æ—á—Ç—É', True)
    PAYMENT_ADD_EMAIL_ERROR = ('payment_add_email_error', '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã', True)
    PAYMENT_URL_TARIFF = ('payment_url', '–ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ–∞', True)
    PAYMENT_URL_ERROR = ('payment_url_error', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏', True)
    PAYMENT_URL_REQUEST_VIEW = ('payment_url_request_view', '–ü–æ—Å–º–æ—Ç—Ä–µ–ª –ø–æ–∫—É–ø–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤', True)
    PAYMENT_URL_REQUEST = ('payment_url_request', '–ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤', True)
    PAYMENT_TRY_USED_TRIAL = ('payment_used_trial', '–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–±–∞–≤–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', True)
    PAYMENT_USE_TRIAL = ('payment_use_trial', '–í–∑—è–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', False)
    PAYMENT_SUCCESS = ('payment_success', '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞', True)
    PAYMENT_DISALLOW = ('payment_disallow', '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤', True)

    HELP_START_MSG = ('gpt_help_msg', '–ü–æ–º–æ—â—å (–∫–æ–º–∞–Ω–¥–∞)', True)
    HELP_START_CB = ('gpt_help_msg', '–ü–æ–º–æ—â—å (–∫–Ω–æ–ø–∫–∞)', True)
    HELP_TEXT = ('help_text', '–ü–æ–º–æ—â—å —Ç–µ–∫—Å—Ç', False)

    ERROR = ('error', '–û—à–∏–±–∫–∞', False)
    BAN = ('ban', '–ë–∞–Ω –ø–æ–ø—ã—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è', True)
    EMPTY_REQUEST = ('empty_request', '–ó–∞–ø—Ä–æ—Å –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞', True)

    SEND_NOTICE_1 = ('send_notice_1', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 –¥–Ω—è', True)
    SEND_NOTICE_2 = ('send_notice_2', '–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞', True)

    def __init__(self, key, label, with_text):
        self.key = key
        self.label = label
        self.with_text = with_text


# –ö–æ—Ä—Ç–µ–∂ –∫–æ—Ä—Ç–µ–∂–µ–π –¥–ª—è Django choices
HANDLER_KEY_CHOICES = tuple((member.key, member.label) for member in HandlerKey)
HANDLER_KEY_DICT = {member.key: member.label for member in HandlerKey}
